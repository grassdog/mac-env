# Command Enhancements

# Utility
alias reload='source ~/bin/dotfiles/zsh/aliases'
alias ea='vim -f ~/bin/dotfiles/bash/aliases && reload' # Edit aliases

# Quicker cd
alias cdp='cd `dirname !$`' # CD to parent dir of previous file

# Common
alias cdd='cd -'  # goto last dir cd'ed from
alias cls='clear; l'
function cdc() { 
    cd $1; ls 
}
alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -ohGF'  # -l long listing
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias la="ls -A -l -G"

alias md='mkdir -p'
alias s='cd ..'   # up one dir

function take() { 
    mkdir -p "$1"
    cd "$1" 
}

# Processes
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
alias psu='ps auxw' # Wide ps sorted by CPU usage
alias psf='ps ax --forest'
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Finder
alias o='open . &'
ff()     {  open -a "/Applications/Firefox.app" "$@"  }
safari() {  open -a Safari "$@"  }
alias apps='open /Applications'

# Mysql
alias startmysql="cd /usr/local/mysql ; sudo -u mysql /usr/local/mysql/bin/mysqld_safe &"

# Git
#alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() { 
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='vim .git/config'
# Git clone from GitHub
function gch() {
  #git clone git://github.com/$USER/$1.git
  git clone git://github.com/grassdog/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

#Command to add local git to external repo
#git remote add origin git@github.com:grassdog/binfiles.git

alias le='less -SR'
alias vi='vim'
alias g='gvim'
alias gv='gvim'
alias m='mate'

function markdown() { 
~/bin/Markdown.pl $1 > $1.html 
}

# Setup a tunnel
function haproxyssh() { 
  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
}

# Syntax check Javascript
function jsc() { 
  jsl -conf ~/bin/jsl.default.conf -process $1 
}

# Nginx
function nginx_stop() {
    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}
function nginx_start() {
    sudo /opt/nginx/sbin/nginx
}

# From http://github.com/suztomo/dotfiles
function rmf() {
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file() {
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

