" Color scheme (terminal)
set background=dark
colorscheme delek

" Always show at least three lines below cursor
set scrolloff=3

set showmode

" How many tenths of a second to blink matching brackets for
set mat=3

" Shortens messages to avoid 'press a key' prompt
set shortmess=atI

" No Noise or bell
set visualbell t_vb=

"function s:setupMarkup()
"  call s:setupWrapping()
"  map <buffer> <Leader>p :Mm <CR>
"  set filetype=markdown
"endfunction

" Set up syntax for highlighting
au BufNewFile,BufRead *.less set filetype=less
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.json set filetype=json

"Fix common mistypings
abbreviate teh the

" Enable backups
"set backup

" Use tab instead of % for brace matching
nmap <tab> %
vmap <tab> %

" Override the default fold text
function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 320 foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) 
    return line . '‚Ä¶' . "  [" . foldedlinecount . '‚Ä¶]' . repeat(" ",fillcharcount)
endfunction
set foldtext=MyFoldText()

" Disable useless HTML5 junk
let g:event_handler_attributes_complete = 0
let g:rdfa_attributes_complete = 0
let g:microdata_attributes_complete = 0
let g:atia_attributes_complete = 0

" Only show errors
"let g:syntastic_quiet_warnings=1

unlet macvim_hig_shift_movement

"-----------------
" Command Mappings
"-----------------

" Make cursor movement cross long lines
"nnoremap j gj
"nnoremap k gk
"nnoremap <down> gj
"nnoremap <up> gk

" Easy buffer navigation
map <C-left> <C-w>h
map <C-down> <C-w>j
map <C-up> <C-w>k
map <C-right> <C-w>l

" Open a new vertical split
map <leader>w <C-w>v<C-w>l

" Use F1 to toggle fullscreen mode
inoremap <F1> <ESC>:set invfullscreen<CR>a
nnoremap <F1> :set invfullscreen<CR>
vnoremap <F1> :set invfullscreen<CR>

" Edit .vimrc
nmap <F2> <C-w><C-v><C-l>:e $MYVIMRC<cr>
" Reload with :so %

" Show current file in tree view
inoremap <F4> <ESC>:NERDTreeFind<CR>
nnoremap <F4> :NERDTreeFind<CR>
vnoremap <F4> :NERDTreeFind<CR>

" Remove trailing white space from file
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Use F10 to call :Rake task
inoremap <F10> <ESC>:Rake<CR>
nnoremap <F10> :Rake<CR>
vnoremap <F10> :Rake<CR>

" Use F9 to call :A task
inoremap <F9> <ESC>:A<CR>
nnoremap <F9> :A<CR>
vnoremap <F9> :A<CR>

" Use F8 to call :R task
inoremap <F8> <ESC>:R<CR>
nnoremap <F8> :R<CR>
vnoremap <F8> :R<CR>

" remove highlighting
map <leader><space> :noh<cr>

" Open recently edited files
nmap <leader>er :MRU<cr>

" Fold html tags
nnoremap <leader>ft Vatzf

" Reformat the file
nmap <leader>rf gg=G

" Reformat XML files
map <leader>fx <Esc>:1,$!xmllint --format -<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R -a *<CR><CR>
map <Leader>rtt :!ctags -R -a `bundle show rails`/../*<CR><CR>

" Look for tags in current directory and up tree to $HOME
set tags+=tags;$HOME

